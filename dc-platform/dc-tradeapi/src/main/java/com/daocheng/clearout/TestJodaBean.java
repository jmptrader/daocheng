package com.daocheng.clearout;

import java.io.Serializable;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.Bean;
import org.joda.beans.impl.direct.DirectMetaProperty;

@BeanDefinition
public final class TestJodaBean implements ImmutableBean, Serializable {
    
    
     @PropertyDefinition
     private final String _id;
     
     @PropertyDefinition(validate = "notNull")
      private final String scheme;
      /**
       * The value of the identifier within the scheme.
       */
      @PropertyDefinition(validate = "notNull")
      private final String value;
      
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code TestJodaBean}.
     * @return the meta-bean, not null
     */
    public static TestJodaBean.Meta meta() {
        return TestJodaBean.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(TestJodaBean.Meta.INSTANCE);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static TestJodaBean.Builder builder() {
        return new TestJodaBean.Builder();
    }

    private TestJodaBean(
            String _id,
            String scheme,
            String value) {
        JodaBeanUtils.notNull(scheme, "scheme");
        JodaBeanUtils.notNull(value, "value");
        this._id = _id;
        this.scheme = scheme;
        this.value = value;
    }

    @Override
    public TestJodaBean.Meta metaBean() {
        return TestJodaBean.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the _id.
     * @return the value of the property
     */
    public String get_id() {
        return _id;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the scheme.
     * @return the value of the property, not null
     */
    public String getScheme() {
        return scheme;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the value of the identifier within the scheme.
     * @return the value of the property, not null
     */
    public String getValue() {
        return value;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            TestJodaBean other = (TestJodaBean) obj;
            return JodaBeanUtils.equal(_id, other._id) &&
                    JodaBeanUtils.equal(scheme, other.scheme) &&
                    JodaBeanUtils.equal(value, other.value);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(_id);
        hash = hash * 31 + JodaBeanUtils.hashCode(scheme);
        hash = hash * 31 + JodaBeanUtils.hashCode(value);
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("TestJodaBean{");
        buf.append("_id").append('=').append(_id).append(',').append(' ');
        buf.append("scheme").append('=').append(scheme).append(',').append(' ');
        buf.append("value").append('=').append(JodaBeanUtils.toString(value));
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code TestJodaBean}.
     */
    public static final class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code _id} property.
         */
        private final MetaProperty<String> _id = DirectMetaProperty.ofImmutable(
                this, "_id", TestJodaBean.class, String.class);
        /**
         * The meta-property for the {@code scheme} property.
         */
        private final MetaProperty<String> scheme = DirectMetaProperty.ofImmutable(
                this, "scheme", TestJodaBean.class, String.class);
        /**
         * The meta-property for the {@code value} property.
         */
        private final MetaProperty<String> value = DirectMetaProperty.ofImmutable(
                this, "value", TestJodaBean.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "_id",
                "scheme",
                "value");

        /**
         * Restricted constructor.
         */
        private Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 94650:  // _id
                    return _id;
                case -907987547:  // scheme
                    return scheme;
                case 111972721:  // value
                    return value;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public TestJodaBean.Builder builder() {
            return new TestJodaBean.Builder();
        }

        @Override
        public Class<? extends TestJodaBean> beanType() {
            return TestJodaBean.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code _id} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> _id() {
            return _id;
        }

        /**
         * The meta-property for the {@code scheme} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> scheme() {
            return scheme;
        }

        /**
         * The meta-property for the {@code value} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> value() {
            return value;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 94650:  // _id
                    return ((TestJodaBean) bean).get_id();
                case -907987547:  // scheme
                    return ((TestJodaBean) bean).getScheme();
                case 111972721:  // value
                    return ((TestJodaBean) bean).getValue();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code TestJodaBean}.
     */
    public static final class Builder extends DirectFieldsBeanBuilder<TestJodaBean> {

        private String _id;
        private String scheme;
        private String value;

        /**
         * Restricted constructor.
         */
        private Builder() {
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        private Builder(TestJodaBean beanToCopy) {
            this._id = beanToCopy.get_id();
            this.scheme = beanToCopy.getScheme();
            this.value = beanToCopy.getValue();
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case 94650:  // _id
                    return _id;
                case -907987547:  // scheme
                    return scheme;
                case 111972721:  // value
                    return value;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case 94650:  // _id
                    this._id = (String) newValue;
                    break;
                case -907987547:  // scheme
                    this.scheme = (String) newValue;
                    break;
                case 111972721:  // value
                    this.value = (String) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public Builder setString(String propertyName, String value) {
            setString(meta().metaProperty(propertyName), value);
            return this;
        }

        @Override
        public Builder setString(MetaProperty<?> property, String value) {
            super.setString(property, value);
            return this;
        }

        @Override
        public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
            super.setAll(propertyValueMap);
            return this;
        }

        @Override
        public TestJodaBean build() {
            return new TestJodaBean(
                    _id,
                    scheme,
                    value);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the _id.
         * @param _id  the new value
         * @return this, for chaining, not null
         */
        public Builder _id(String _id) {
            this._id = _id;
            return this;
        }

        /**
         * Sets the scheme.
         * @param scheme  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder scheme(String scheme) {
            JodaBeanUtils.notNull(scheme, "scheme");
            this.scheme = scheme;
            return this;
        }

        /**
         * Sets the value of the identifier within the scheme.
         * @param value  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder value(String value) {
            JodaBeanUtils.notNull(value, "value");
            this.value = value;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(128);
            buf.append("TestJodaBean.Builder{");
            buf.append("_id").append('=').append(JodaBeanUtils.toString(_id)).append(',').append(' ');
            buf.append("scheme").append('=').append(JodaBeanUtils.toString(scheme)).append(',').append(' ');
            buf.append("value").append('=').append(JodaBeanUtils.toString(value));
            buf.append('}');
            return buf.toString();
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
